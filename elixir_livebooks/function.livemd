<!-- vim: syntax=markdown -->

# Function

A set of functions for working with functions.

Anonymous functions are typically created by using `fn`:

```elixir
add = fn a, b -> a + b end
add.(1, 2)
```
Anonymous functions can also have multiple clauses. All clauses
should expect the same number of arguments:

```elixir
negate = fn
  true -> false
  false -> true
end

negate.(false)
```
## The capture operator

It is also possible to capture public module functions and pass them
around as if they were anonymous functions by using the capture
operator `Kernel.SpecialForms.&/1`:

```elixir
add = &Kernel.+/2
add.(1, 2)
```
```elixir
length = &String.length/1
length.("hello")
```
To capture a definition within the current module, you can skip the
module prefix, such as `&my_fun/2`. In those cases, the captured
function can be public (`def`) or private (`defp`).

The capture operator can also be used to create anonymous functions
that expect at least one argument:

```elixir
add = &(&1 + &2)
add.(1, 2)
```
In such cases, using the capture operator is no different than using `fn`.

## Internal and external functions

We say that functions that point to definitions residing in modules, such
as `&String.length/1`, are **external** functions. All other functions are
**local** and they are always bound to the file or module that defined them.

Besides the functions in this module to work with functions, `Kernel` also
has an `apply/2` function that invokes a function with a dynamic number of
arguments, as well as `is_function/1` and `is_function/2`, to check
respectively if a given value is a function or a function of a given arity.

## Function capture/3

Captures the given function.

Inlined by the compiler.

## Examples

```elixir
Function.capture(String, :length, 1)
```

## Function identity/1

Returns its input `value`. This function can be passed as an anonymous function
to transformation functions.

## Examples

```elixir
Function.identity("Hello world!")
```
```elixir
'abcdaabccc' |> Enum.sort() |> Enum.chunk_by(&Function.identity/1)
```
```elixir
Enum.group_by('abracadabra', &Function.identity/1)
```
```elixir
Enum.map([1, 2, 3, 4], &Function.identity/1)
```

## Function info/1

Returns a keyword list with information about a function.

The returned keys (with the corresponding possible values) for
all types of functions (local and external) are the following:

  * `:type` - `:local` (for anonymous functions) or `:external` (for
    named functions).

  * `:module` - an atom which is the module where the function is defined when
  anonymous or the module which the function refers to when it's a named function.
  * `:arity` - (integer) the number of arguments the function is to be called with.

  * `:name` - (atom) the name of the function.

  * `:env` - a list of the environment or free variables. For named
    functions, the returned list is always empty.

When `fun` is an anonymous function (that is, the type is `:local`), the followingadditional keys are returned:

  * `:pid` - PID of the process that originally created the function.

  * `:index` - (integer) an index into the module function table.

  * `:new_index` - (integer) an index into the module function table.

  * `:new_uniq` - (binary) a unique value for this function. It's
    calculated from the compiled code for the entire module.

  * `:uniq` - (integer) a unique value for this function. This integer is
    calculated from the compiled code for the entire module.

**Note**: this function must be used only for debugging purposes.
Inlined by the compiler.

## Examples

```elixir
fun = fn x -> x end
info = Function.info(fun)
Keyword.get(info, :arity)
```
```elixir
Keyword.get(info, :type)
```
```elixir
fun = &String.length/1
info = Function.info(fun)
Keyword.get(info, :type)
```
```elixir
Keyword.get(info, :name)
```

## Function info/2

Returns a specific information about the function.

The returned information is a two-element tuple in the shape of
`{info, value}`.

For any function, the information asked for can be any of the atoms
`:module`, `:name`, `:arity`, `:env`, or `:type`.

For anonymous functions, there is also information about any of the
atoms `:index`, `:new_index`, `:new_uniq`, `:uniq`, and `:pid`.
For a named function, the value of any of these items is always the
atom `:undefined`.

For more information on each of the possible returned values, see
`info/1`.

Inlined by the compiler.

## Examples

```elixir
f = fn x -> x end
Function.info(f, :arity)
```
```elixir
Function.info(f, :type)
```
```elixir
fun = &String.length/1
Function.info(fun, :name)
```
```elixir
Function.info(fun, :pid)
```

