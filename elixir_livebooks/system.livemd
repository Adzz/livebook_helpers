<!-- vim: syntax=markdown -->

# System

The `System` module provides functions that interact directly
with the VM or the host system.

## Time

The `System` module also provides functions that work with time,
returning different times kept by the system with support for
different time units.

One of the complexities in relying on system times is that they
may be adjusted. For example, when you enter and leave daylight
saving time, the system clock will be adjusted, often adding
or removing one hour. We call such changes "time warps". In
order to understand how such changes may be harmful, imagine
the following code:

```elixir
## DO NOT DO THIS
prev = System.os_time()
# ... execute some code ...
next = System.os_time()
diff = next - prev
```
If, while the code is executing, the system clock changes,
some code that executed in 1 second may be reported as taking
over 1 hour! To address such concerns, the VM provides a
monotonic time via `System.monotonic_time/0` which never
decreases and does not leap:

```elixir
## DO THIS
prev = System.monotonic_time()
# ... execute some code ...
next = System.monotonic_time()
diff = next - prev
```
Generally speaking, the VM provides three time measurements:

  * `os_time/0` - the time reported by the operating system (OS). This time may be
    adjusted forwards or backwards in time with no limitation;

  * `system_time/0` - the VM view of the `os_time/0`. The system time and operating
    system time may not match in case of time warps although the VM works towards
    aligning them. This time is not monotonic (i.e., it may decrease)
    as its behaviour is configured [by the VM time warp
    mode](https://erlang.org/doc/apps/erts/time_correction.html#Time_Warp_Modes);

  * `monotonic_time/0` - a monotonically increasing time provided
    by the Erlang VM.

The time functions in this module work in the `:native` unit(unless specified otherwise), which is operating system dependent. Most of
the time, all calculations are done in the `:native` unit, to
avoid loss of precision, with `convert_time_unit/3` being
invoked at the end to convert to a specific time unit like
`:millisecond` or `:microsecond`. See the `t:time_unit/0` type for
more information.

For a more complete rundown on the VM support for different
times, see the [chapter on time and time
correction](https://erlang.org/doc/apps/erts/time_correction.html)
in the Erlang docs.

## Function argv/0

Lists command line arguments.

Returns the list of command line arguments passed to the program.

## Function argv/1

Modifies command line arguments.

Changes the list of command line arguments. Use it with caution,
as it destroys any previous argv information.

## Function at_exit/1

Registers a program exit handler function.

Registers a function that will be invoked at the end of an Elixir script.
A script is typically started via the command line via the `elixir` and
`mix` executables.

The handler always executes in a different process from the one it was
registered in. As a consequence, any resources managed by the calling process
(ETS tables, open files, and others) won't be available by the time the handler
function is invoked.

The function must receive the exit status code as an argument.

If the VM terminates programmatically, via `System.stop/1`, `System.halt/1`,
or exit signals, the `at_exit/1` callbacks are not executed.

## Function build_info/0

Elixir build information.

Returns a map with the Elixir version, the Erlang/OTP release it was compiled
with, a short Git revision hash and the date and time it was built.

Every value in the map is a string, and these are:

  * `:build` - the Elixir version, short Git revision hash and
    Erlang/OTP release it was compiled with
  * `:date` - a string representation of the ISO8601 date and time it was built
  * `:otp_release` - OTP release it was compiled with
  * `:revision` - short Git revision hash. If Git was not available at building
    time, it is set to `""`
  * `:version` - the Elixir version

One should not rely on the specific formats returned by each of those fields.Instead one should use specialized functions, such as `version/0` to retrieve
the Elixir version and `otp_release/0` to retrieve the Erlang/OTP release.

## Examples

```elixir
System.build_info()
```

## Function cmd/3

Executes the given `command` with `args`.

`command` is expected to be an executable available in PATH
unless an absolute path is given.

`args` must be a list of binaries which the executable will receive
as its arguments as is. This means that:

  * environment variables will not be interpolated
  * wildcard expansion will not happen (unless `Path.wildcard/2` is used
    explicitly)
  * arguments do not need to be escaped or quoted for shell safety

This function returns a tuple containing the collected resultand the command exit status.

Internally, this function uses a `Port` for interacting with the
outside world. However, if you plan to run a long-running program,
ports guarantee stdin/stdout devices will be closed but it does not
automatically terminate the program. The documentation for the
`Port` module describes this problem and possible solutions under
the "Zombie processes" section.

## Examples

```elixir
System.cmd("echo", ["hello"])
```
```elixir
System.cmd("echo", ["hello"], env: [{"MIX_ENV", "test"}])
```
If you want to stream the output to Standard IO as it arrives:

```elixir
System.cmd("echo", ["hello"], into: IO.stream())
```
## Options

  * `:into` - injects the result into the given collectable, defaults to `""`
  * `:cd` - the directory to run the command in
  * `:env` - an enumerable of tuples containing environment key-value as
    binary. The child process inherits all environment variables from its
    parent process, the Elixir application, except those overwritten or
    cleared using this option. Specify a value of `nil` to clear (unset) an
    environment variable, which is useful for preventing credentials passed
    to the application from leaking into child processes.
  * `:arg0` - sets the command arg0
  * `:stderr_to_stdout` - redirects stderr to stdout when `true`
  * `:parallelism` - when `true`, the VM will schedule port tasks to improve
    parallelism in the system. If set to `false`, the VM will try to perform
    commands immediately, improving latency at the expense of parallelism.
    The default can be set on system startup by passing the "+spp" argument
    to `--erl`.

## Error reasons
If invalid arguments are given, `ArgumentError` is raised by
`System.cmd/3`. `System.cmd/3` also expects a strict set of
options and will raise if unknown or invalid options are given.

Furthermore, `System.cmd/3` may fail with one of the POSIX reasons
detailed below:

  * `:system_limit` - all available ports in the Erlang emulator are in use

  * `:enomem` - there was not enough memory to create the port

  * `:eagain` - there are no more available operating system processes

  * `:enametoolong` - the external command given was too long

  * `:emfile` - there are no more available file descriptors
    (for the operating system process that the Erlang emulator runs in)

  * `:enfile` - the file table is full (for the entire operating system)

  * `:eacces` - the command does not point to an executable file

  * `:enoent` - the command does not point to an existing file

## Shell commands
If you desire to execute a trusted command inside a shell, with pipes,
redirecting and so on, please check `shell/2`.

## Function compiled_endianness/0

Returns the endianness the system was compiled with.

## Function convert_time_unit/3

Converts `time` from time unit `from_unit` to time unit `to_unit`.

The result is rounded via the floor function.

`convert_time_unit/3` accepts an additional time unit (other than the
ones in the `t:time_unit/0` type) called `:native`. `:native` is the time
unit used by the Erlang runtime system. It's determined when the runtime
starts and stays the same until the runtime is stopped, but could differ
the next time the runtime is started on the same machine. For this reason,
you should use this function to convert `:native` time units to a predictable
unit before you display them to humans.

To determine how many seconds the `:native` unit represents in your current
runtime, you can call this function to convert 1 second to the `:native`
time unit: `System.convert_time_unit(1, :second, :native)`.

## Function cwd/0

Current working directory.

Returns the current working directory or `nil` if one
is not available.

## Function cwd!/0

Current working directory, exception on error.

Returns the current working directory or raises `RuntimeError`.

## Function delete_env/1

Deletes an environment variable.

Removes the variable `varname` from the environment.

## Function endianness/0

Returns the endianness.

## Function fetch_env/1

Returns the value of the given environment variable or `:error` if not found.

If the environment variable `varname` is set, then `{:ok, value}` is returned
where `value` is a string. If `varname` is not set, `:error` is returned.

## Examples

```elixir
System.fetch_env("PORT")
```
```elixir
System.fetch_env("NOT_SET")
```

## Function fetch_env!/1

Returns the value of the given environment variable or raises if not found.

Same as `get_env/1` but raises instead of returning `nil` when the variable is
not set.

## Examples

```elixir
System.fetch_env!("PORT")
```
```elixir
System.fetch_env!("NOT_SET")
```

## Function find_executable/1

Locates an executable on the system.

This function looks up an executable program given
its name using the environment variable PATH on Windows and Unix-like
operating systems. It also considers the proper executable
extension for each operating system, so for Windows it will try to
lookup files with `.com`, `.cmd` or similar extensions.

## Function get_env/0

Returns all system environment variables.

The returned value is a map containing name-value pairs.
Variable names and their values are strings.

## Function get_env/2

Returns the value of the given environment variable.

The returned value of the environment variable
`varname` is a string. If the environment variable
is not set, returns the string specified in `default` or
`nil` if none is specified.

## Examples

```elixir
System.get_env("PORT")
```
```elixir
System.get_env("NOT_SET")
```
```elixir
System.get_env("NOT_SET", "4001")
```

## Function get_pid/0

Erlang VM process identifier.

Returns the process identifier of the current Erlang emulator
in the format most commonly used by the operating system environment.

For more information, see `:os.getpid/0`.

## Function halt/1

Immediately halts the Erlang runtime system.

Terminates the Erlang runtime system without properly shutting down
applications and ports. Please see `stop/1` for a careful shutdown of the
system.

`status` must be a non-negative integer, the atom `:abort` or a binary.

  * If an integer, the runtime system exits with the integer value which
    is returned to the operating system.

  * If `:abort`, the runtime system aborts producing a core dump, if that is
    enabled in the operating system.

  * If a string, an Erlang crash dump is produced with status as slogan,
    and then the runtime system exits with status code 1.

Note that on many platforms, only the status codes 0-255 are supportedby the operating system.

For more information, see `:erlang.halt/1`.

## Examples

```elixir
System.halt(0)
System.halt(1)
System.halt(:abort)
```
## Function monotonic_time/0

Returns the current monotonic time in the `:native` time unit.

This time is monotonically increasing and starts in an unspecified
point in time.

Inlined by the compiler.

## Function monotonic_time/1

Returns the current monotonic time in the given time unit.

This time is monotonically increasing and starts in an unspecified
point in time.

## Function no_halt/0

Checks if the system will halt or not at the end of ARGV processing.

## Function no_halt/1

Marks if the system should halt or not at the end of ARGV processing.

## Function os_time/0

Returns the current operating system (OS) time.

The result is returned in the `:native` time unit.

This time may be adjusted forwards or backwards in time
with no limitation and is not monotonic.

Inlined by the compiler.

## Function os_time/1

Returns the current operating system (OS) time in the given time `unit`.

This time may be adjusted forwards or backwards in time
with no limitation and is not monotonic.

## Function otp_release/0

Returns the Erlang/OTP release number.

## Function pid/0

Returns the operating system PID for the current Erlang runtime system instance.

Returns a string containing the (usually) numerical identifier for a process.
On Unix-like operating systems, this is typically the return value of the `getpid()` system call.
On Windows, the process ID as returned by the `GetCurrentProcessId()` system
call is used.

## Examples

```elixir
System.pid()
```
## Function put_env/1

Sets multiple environment variables.

Sets a new value for each environment variable corresponding
to each `{key, value}` pair in `enum`.

## Function put_env/2

Sets an environment variable value.

Sets a new `value` for the environment variable `varname`.

## Function restart/0

Restarts all applications in the Erlang runtime system.

All applications are taken down smoothly, all code is unloaded, and all ports
are closed before the system starts all applications once again.

## Examples

```elixir
System.restart()
```
## Function schedulers/0

Returns the number of schedulers in the VM.

## Function schedulers_online/0

Returns the number of schedulers online in the VM.

## Function shell/2

Executes the given `command` in the OS shell.

It uses `sh` for Unix-like systems and `cmd` for Windows.

**Important**: Use this function with care. In particular, **never
pass untrusted user input to this function**, as the user would be
able to perform "command injection attacks" by executing any code
directly on the machine. Generally speaking, prefer to use `cmd/3`
over this function.

## Examples

```elixir
System.shell("echo hello")
```
If you want to stream the output to Standard IO as it arrives:

```elixir
System.shell("echo hello", into: IO.stream())
```
## Options

It accepts the same options as `cmd/3`, except for `arg0`.

## Function stacktrace/0

Deprecated mechanism to retrieve the last exception stacktrace.

Starting from Erlang/OTP 23, this function will always return an
empty list.

## Function stop/1

Carefully stops the Erlang runtime system.

All applications are taken down smoothly, all code is unloaded, and all ports
are closed before the system terminates by calling `halt/1`.

`status` must be a non-negative integer or a binary.

  * If an integer, the runtime system exits with the integer value which is
    returned to the operating system.

  * If a binary, an Erlang crash dump is produced with status as slogan, and
    then the runtime system exits with status code 1.

Note that on many platforms, only the status codes 0-255 are supportedby the operating system.

## Examples

```elixir
System.stop(0)
System.stop(1)
```
## Function system_time/0

Returns the current system time in the `:native` time unit.

It is the VM view of the `os_time/0`. They may not match in
case of time warps although the VM works towards aligning
them. This time is not monotonic.

Inlined by the compiler.

## Function system_time/1

Returns the current system time in the given time unit.

It is the VM view of the `os_time/0`. They may not match in
case of time warps although the VM works towards aligning
them. This time is not monotonic.

## Function time_offset/0

Returns the current time offset between the Erlang VM monotonic
time and the Erlang VM system time.

The result is returned in the `:native` time unit.

See `time_offset/1` for more information.

Inlined by the compiler.

## Function time_offset/1

Returns the current time offset between the Erlang VM monotonic
time and the Erlang VM system time.

The result is returned in the given time unit `unit`. The returned
offset, added to an Erlang monotonic time (for instance, one obtained with
`monotonic_time/1`), gives the Erlang system time that corresponds
to that monotonic time.

## Function tmp_dir/0

Writable temporary directory.

Returns a writable temporary directory.
Searches for directories in the following order:

  1. the directory named by the TMPDIR environment variable
  2. the directory named by the TEMP environment variable
  3. the directory named by the TMP environment variable
  4. `C:\TMP` on Windows or `/tmp` on Unix-like operating systems
  5. as a last resort, the current working directory

Returns `nil` if none of the above are writable.

## Function tmp_dir!/0

Writable temporary directory, exception on error.

Same as `tmp_dir/0` but raises `RuntimeError`
instead of returning `nil` if no temp dir is set.

## Function trap_signal/3

Traps the given `signal` to execute the `fun`.

**Important**: Trapping signals may have strong implications
on how a system shuts down and behave in production and
therefore it is extremely discouraged for libraries to
set their own traps. Instead, they should redirect users
to configure them themselves. The only cases where it is
acceptable for libraries to set their own traps is when
using Elixir in script mode, such as in `.exs` files and
via Mix tasks.

An optional `id` that uniquely identifies the function
can be given, otherwise a unique one is automatically
generated. If a previously registered `id` is given,
this function returns an error tuple. The `id` can be
used to remove a registered signal by calling
`untrap_signal/2`.

The given `fun` receives no arguments and it must return
`:ok`.

It returns `{:ok, id}` in case of success,
`{:error, :already_registered}` in case the id has already
been registered for the given signal, or `{:error, :not_sup}`
in case trapping exists is not supported by the current OS.

The first time a signal is trapped, it will override the
default behaviour from the operating system. If the same
signal is trapped multiple times, subsequent functions
given to `trap_signal` will execute *first*. In other
words, you can consider each function is prepended to
the signal handler.

By default, the Erlang VM register traps to the three
signals:

  * `:sigstop` - gracefully shuts down the VM with `stop/0`
  * `:sigquit` - halts the VM via `halt/0`
  * `:sigusr1` - halts the VM via status code of 1

Therefore, if you add traps to the signals above, thedefault behaviour above will be executed after all user
signals.

## Implementation notes

All signals run from a single process. Therefore, blocking the
`fun` will block subsequent traps. It is also not possible to add
or remove traps from within a trap itself.

Internally, this functionality is built on top of `:os.set_signal/2`.
When you register a trap, Elixir automatically sets it to `:handle`
and it reverts it back to `:default` once all traps are removed
(except for `:sigquit`, `:sigterm`, and `:sigusr1` which are always
handled). If you or a library call `:os.set_signal/2` directly,
it may disable Elixir traps (or Elixir may override your configuration).

## Function unique_integer/1

Generates and returns an integer that is unique in the current runtime
instance.

"Unique" means that this function, called with the same list of `modifiers`,
will never return the same integer more than once on the current runtime
instance.

If `modifiers` is `[]`, then a unique integer (that can be positive or negative) is returned.
Other modifiers can be passed to change the properties of the returned integer:

  * `:positive` - the returned integer is guaranteed to be positive.
  * `:monotonic` - the returned integer is monotonically increasing. This
    means that, on the same runtime instance (but even on different
    processes), integers returned using the `:monotonic` modifier will always
    be strictly less than integers returned by successive calls with the
    `:monotonic` modifier.

All modifiers listed above can be combined; repeated modifiers in `modifiers`will be ignored.

Inlined by the compiler.

## Function untrap_signal/2

Removes a previously registered `signal` with `id`.

## Function user_home/0

User home directory.

Returns the user home directory (platform independent).

## Function user_home!/0

User home directory, exception on error.

Same as `user_home/0` but raises `RuntimeError`
instead of returning `nil` if no user home is set.

## Function version/0

Elixir version information.

Returns Elixir's version as binary.

## Type time_unit

The time unit to be passed to functions like `monotonic_time/1` and others.

The `:second`, `:millisecond`, `:microsecond` and `:nanosecond` time
units controls the return value of the functions that accept a time unit.

A time unit can also be a strictly positive integer. In this case, it
represents the "parts per second": the time will be returned in `1 /
parts_per_second` seconds. For example, using the `:millisecond` time unit
is equivalent to using `1000` as the time unit (as the time will be returned
in 1/1000 seconds - milliseconds).

